      PROGRAM INTRLV
C|INTRLV    PROGRAM TO INTERLEAVE INTEGRATION OUTPUT ONTO AST/SAT TAPE.
C      J.F.CHANDLER  1977 MAY
C      PLANET NUMBER EDITING CHANGED 1978 JUNE
C      EMPTY CATEGORY SCHEME FIXED 1979 JUNE
C   CAN PRODUCE AN ENTIRELY NEW TAPE FROM MERGING INTEGRATIONS.
C   NOTE: AN S-BODY TAPE FROM 'SAMP' MAY HAVE A SHORT RECORD 2, AND
C   THIS PROGRAM MUST BE INFORMED WHICH KIND OF INPUT TAPE (IF
C   ANY) IS SUPPLIED.  THE EXTRA HEADER INFORMATION RELATES TO THE
C   INTEGRATION PARAMETERS.
C
C   INPUT CONSISTS OF NAMELIST &INPUT PLUS (POSSIBLY ) A TITLE
C   CARD AND OPTIONAL BODY EDITING CARDS (UP TO 20).
C    1. &INPUT
C        IOLD.LE.0 => NO OLD AST/SAT TAPE
C        IOLD.GT.0 => OLD TAPE IS DATA SET IOLD (DEFAULT 11)
C        SHORT=T   => OLD TAPE HAS SHORT RECORD 2 (DEFAULT F)
C        INEW.GT.0 => OUTPUT MERGED TAPE IS DATA SET INEW (DEF 12)
C        INEW.LE.0 => NO OUTPUT TAPE
C        ALL VALUES IN ARRAY 'ITAPE' ARE TESTED FOR VALID TAPES
C           AND USED (IF DIFFERENT FROM IOLD AND INEW)
C        OUTPUT TAPE RANGE IS (JD1,JD2) OR MAX RANGE OF BODY TAPES,
C        WHICHEVER IS LESS.  IF JD1 OR JD2 IS ZERO, AND AN OLD
C        TAPE IS BEING READ, THE OLD TAPE'S LIMIT IS USED INSTEAD.
C        DEFAULT VALUES OF IVL FOR THE 3 CLASSES OF BODY.
C        ON ANY OUTPUT RECORD IVT* IS .LE.IVD* AND .LE.IVL* (FROM
C        OLD TAPE, IF ANY) AND .LE. APPROPRIATE IVL OF INPUT TAPES.
C        NOTE: IF ALL INFO FROM THE OLD TAPE IS BEING REPLACED,
C              IVL* IS NOT CONSIDERED (SEGREGATED BY CLASS)
C        INTR  IS SMALLEST 'INT' OF OUTPUT TAPE (IF NO OLD TAPE)
C        NTPTP IS MAXIMUM ALLOWED FORTRAN UNIT NUMBER (DEFAULT
C                 VALUE IS 99 IF NOT OTHERWISE SPECIFIED).
C        ERRLEV - NUMBER OF INPUT TIME ERRORS ALLOWED BEFORE ABORT
C        DUMP   - IF .TRUE., PRINT POSITIONS OUT (DEF F)
C        TEST   - IF .TRUE., PRINT EXTRA DIAGNOSTICS (DEF F)
C        STOP   - IF .TRUE., HALT AFTER READING HEADERS (DEF F)
C        SKPHDR - IF .TRUE., OMIT PRINTING HEADER INFO (DEF F)
C    2. TITLE CARD                               (20A4)
C        IHEAD IS RECORD 1 OF OUTPUT TAPE (READ ONLY IF NO OLD TAPE
C    3. NP1,NC1,NP2,NC2                          (4I4)
C        BODY EDITING CARDS (UP TO 20).  REPLACE BODY NP1 (CENTER
C        NC1) WITH BODY NUMBER NP2 AND CENTER NC2.  APPLIES TO OLD
C        TAPE.  IF NP2 IS NON-POSITIVE, DELETE BODY.
C
      IMPLICIT NONE
C        INPUT PARAMETERS -- INITIAL VALUES
      INTEGER*4 IOLD/11/,INEW/12/,NTPTP/99/,INTR/-5/,JD1/0/,JD2/0/
      LOGICAL*4 SHORT/.FALSE./, TEST/.FALSE./, DUMP/.FALSE./,
     .   CRDIN/.FALSE./, CRDOUT/.FALSE./, STOP/.FALSE./, SKPHDR/.FALSE./
      INTEGER*2 ITAPE(12)/12*0/
      EQUIVALENCE (JD1,JDE1),(JD2,JDE2)
C          TAPE QUANTITIES
      CHARACTER*4 IHEAD(32),JHEAD(22),NAME(6,12),
     1  LNKLVL,LEVJ, LEVP(12)/12*'    '/
      INTEGER*4 IFILTR,IPAG,ITERAT,JDB(3),JDA(3),JDN1(12),
     1  JD0(12),JDJ(12),JDN2(12)
      CHARACTER*8 HEDCRD(10),HED2(6)/6*'        '/, HED2I(6)/' INTERLE',
     1 'AVED BOD','Y INTEGR','ATION TA','PES     ','        '/
      EQUIVALENCE (IHEAD(1),HEDCRD(1)),(IHEAD(21),HED2(1))
C        SAVED INPUT BODY NAMES FROM TAPES
      CHARACTER*8 TNAME(12),PNAME
      EQUIVALENCE (PNAME,JHEAD(1))
      INTEGER*2 IER(12),NSK(12),NSKE(12),IDR(12)/12*0/,
     1 JCOPY(12),JREC(12),ILOSE(12)
      INTEGER*2 NAST,NPL(12),NCP(12),INTB(12),NASU
C
C        HEADER INFO FOR OUTPUT TAPE
      REAL*10 BMAS(12)/12*0._10/,CMAS(12)/12*0._10/,FR0(12)/12*0._10/,
     1 RELFT(12)/12*0._10/
      REAL*4 EPSB2/0./
      INTEGER*2 KB2(40)/40*0/,KKB2(80)/80*0/,ICND(12)/12*0/
      INTEGER*4 JVLB2/0/,ITRT/1/,NPG/-1/
C        NUMBERS WHICH SHOULD COME FROM INTEGRATION TAPES
      INTEGER*2 NPLN,NCNT,IPAR,INT,KP(100),JCND,IHR,IMIN,KKP(100)
      REAL*4 EPS(6)
      REAL*10 COND(6),CON(36),PRM(100),FRCTJ(12),BODY(6,481),
     1 PLAN(6,5,12),D(3),BETA(6,12),DIN(12),DI5(12),DO(12),OVLY(999)
      EQUIVALENCE (D(1),D1),(D(2),D4),(D(3),D8)
      EQUIVALENCE (PRM(1),BODY(1,1),OVLY(1)),(COND(1),FRCTJ(1)),
     . (CON(1),OVLY(101)),(BETA(1,1),OVLY(137)),(JHEAD(1),OVLY(209)),
     . (KP(1),OVLY(220)),(KKP(1),OVLY(245))
      EQUIVALENCE (BMAS(1),OVLY(270)),(CMAS(1),OVLY(282)),
     1 (FR0(1),OVLY(294)),(RELFT(1),OVLY(306)),(KB2(1),OVLY(318)),
     2 (KKB2(1),OVLY(328))
C        BOOKKEEPING STUFF
      CHARACTER*4 EXTP,EXTPO/' EXT'/
      REAL*10 TPL(12)
      INTEGER*2 IDSP(12)/12*0/,IREF(12)/12*0/,IDED(12),IPAM(12)
      INTEGER*2 IDSF(12)/12*0/
      INTEGER*2 NNA(3),NNO(3)/3*0/,NB(3),NA(3)/3*0/
     1 , NA1,NA4,NA8,NS1,NS4,NS8,NB1,NB4,NB8
      INTEGER*2 LNA(4)/4*1/,LNB(4)/4*1/,LMA(13),LNN(4)
      EQUIVALENCE (JDB(1),JDB1),(JDB(2),JDI),(JDB(3),JDB2),
     1 (JDA(1),JDA1),(JDA(3),JDA2),
     2  (NA(1),NA1),(NA(2),NA4),(NA(3),NA8),
     3 (NNA(1),NB(1),NB1),(NB(2),NB4),(NB(3),NB8)
     4 ,(LNB(1),LNN(1))
      INTEGER*4 JDM(3)/999999999,0,-999999999/,IVLT(3)/3*6/,KMS(12)
      EQUIVALENCE (JDM(1),JDM1),(JDM(2),JDIE),(JDM(3),JDM2)
      EQUIVALENCE (IVLT(1),IVT1),(IVLT(2),IVT4),(IVLT(3),IVT8)
      INTEGER*4 IVLU(3)/3*6/,IVLD(3)/3*6/
      EQUIVALENCE (IVLU(1),IVL1),(IVLU(2),IVL4),(IVLU(3),IVL8)
      INTEGER*2 INUM(3)/40,10,5/, ERRLEV/20/
      INTEGER*2 INTQ(3)
      LOGICAL*4 OLDFL(12)/12*.FALSE./, ZERFL(12)/12*.TRUE./, STF/.TRUE./
      CHARACTER*1 PG/'1'/,SP/'-'/
      CHARACTER*8 ERREND(2)/'* ERROR','*** EOF'/
C        BODY EDITING CARD STUFF
      CHARACTER*2 YESNO(2)/'OK','NO'/
      LOGICAL*4 EDITT/.FALSE./, ALTER/.FALSE./
C        FILLER
      REAL*8 ZERO(50)/50*0D0/
C        ASSORTED TYPE DECLARATIONS
      REAL*10   BMS,CMS,DJD,DR,DR5,D1,D4,D8,FRCTI,FRCTIE,PD,SEC,T,TI,
     .          TIE
      INTEGER*4 I,ID,IDIR,IN,INT1,INT2,IPHS,IPM,IQ,IQQ,IREC,ITERR,IUP,
     .          IVL,IVLJ,IVL1,IVL4,IVL8,IVT1,IVT4,IVT8,IXN,IY,IYN,I1,J,
     .          JAST,JDA1,JDA2,JDB1,JDB2,JDE1,JDE2,JDI,JDIE,JDIR,JDM1,
     .          JDM2,JDP0,JDP1,JDP2,JDT,JFIXQ,JFLG,JJ,JM,JTP,K,KA,KAST,
     .          KD,KDX,KI,KK,KM,KN,KRE,KREC,MAF,ME1,ME4,ME8,MKN,MS1,
     .          MS4,MS8,N,NAF,NASO,NC1,NC2,NE,NE1,NE4,NE8,NP1,NP2,NS,
     .          NST,NTP
C
      NAMELIST/INPUT/ IOLD,INEW,ITAPE,NTPTP,INTR,SHORT,TEST,DUMP,
     1 JD1,JD2,IVL1,IVL4,IVL8,ERRLEV,CRDIN,CRDOUT,STOP,SKPHDR
C
C   USE OF THE VARIOUS JD VARIABLES -
C    JDA - SAVED OLD TAPE LIMITS             JDB - OLD TAPE LIMITS,
C    JDE - REQUESTED OUTPUT LIMITS                 THEN OUTPUT LIMITS
C    JDI - CURRENT RECORD FROM OLD TAPE      JDJ - CURRENT FROM INPUTS
C    JDM - MAX RANGE OF JDN                  JDN - COLLATED BODY TAPES
C    JDP - TEMP. LATEST BODY TAPE
C        NOTE: BOTH JDM AND JDN ARE ARRANGED JD1.LT.JD2
C
C   ARRAY IREF - SOURCE OF INFO FOR EACH OF THE OUTPUT BODIES
C      IREF(I)= N             BODY INDEX IN OLD TAPE (NO BODY TAPE)
C      IREF(I)= -(100*N+JTP)  JTP IS INDEX INTO ITAPE ARRAY FOR INPUT
C                             N IS INDEX INTO OLD TAPE (ZERO IF NONE)
C
C   NUMBERS OF BODIES IN EACH CLASS (1,2,3) -
C   NA  - FROM OLD TAPE                     NNO - FROM OLD, UNCHANGED
C   NB  - FOR OUTPUT TAPE                   NNA - EQUIVALENT TO NB
C   LNA - CUMULATIVE NA (1-4)               LNB - CUMULATIVE NB
C   LNN - EQUIVALENT TO LNB                 NS  - WHERE EACH GROUP ON
C   NE  - WHERE EACH GROUP ON OLD TAPE ENDS       OLD TAPE BEGINS
C   ME  - EACH GROUP ON OUTPUT TAPE ENDS    MS  - OUTPUT TAPE GROUP STAR
C              FOR EACH BODY
C   LMA - EACH BODY START ON OLD TAPE       NSK - EACH BODY ON OUTPUT
C   NSKE- BODY END ON OUTPUT TAPE                 TAPE STARTS
C----------------------------------------------------------------------
C    FORMAT OF 1ST RECORD
C
C  IHEAD(32)    :C*4  TITLE OF TAPE
C----------------------------------------------------------------------
C    FORMAT OF 2ND RECORD
C
C  NAST         :I*2  NUMBER OF BODIES
C  NPL(NAST)    :I*2  IDENTIFYING NUMBER FOR EACH BODY (ARRANGED IN
C                     ORDER OF INCREASING TABULAR INTERVAL
C  NCP(NAST)    :I*2  IDENTIFYING NUMBER FOR CENTRAL BODY FOR EACH
C                     NPL(I)
C  INTB(NAST)   :I*2  INTERVAL IN DAYS BETWEEN TABULAR POINTS FOR EACH
C                     BODY.  IF NEGATIVE, INTERVAL IS 2**(INTB)
C  JDB1         :I*4  STARTING TIME OF TAPE.IT IS MIDNIGHT OF JULIAN DAY
C                     THIS MEANS THAT THE PEP CONVENTION OF JULIAN DAYS
C                     & FRACTION OF DAY FROM MIDNIGHT IS 0.5 DAY GREATER
C                     THAN CONVENTIONAL JULIAN DAY.
C  JDB2         :I*4  ENDING TIME OF TAPE. IT IS MIDNIGHT OF JULIAN DAY
C                     THAT IS THERE IS NO DATA FOR THIS DAY.
C  JD0(NAST)    :I*4  EPOCH OF INTEGRATION FOR BODY NPL(I).
C  BETA(6,NAST) :R*8  SIX INITIAL CONDITION FOR EACH BODY REFERENCED TO
C                     MEAN EQUATOR AND EQUINOX OF 1950.0.
C                     KEY: A(AU), E, INC(DEG), RA OF ASCENDING NODE(DEG)
C                          ARGUMENT OF PERIGEE(DEG), MEAN ANOMALY(DEG).
C  NAME(6,NAST) :C*4  24 CHARACTER TITLE FOR EACH BODY INTEGRATION. THE
C                     NAME OF THE BODY IS IN THE FIRST
C                     8 CHARACTERS, FOLLOWED BY THE INTEGRATION
C                     RUN NUMBER AND DATE.
C  NA1          :I*2  NUMBER OF BODIES WITH SMALLEST TABULAR INTERVAL
C  NA4          :I*2  NUMBER OF BODIES WITH TABULAR INTERVAL * 4
C  NA8          :I*2  NUMBER OF BODIES WITH TABULAR INTERVAL * 8
C  INTR         :I*4  SMALLEST TABULAR INTERVAL OF TAPE
C  JVLB2        :I*4  SET EQUAL TO ZERO. INDICATES VELOCITY AS WELL AS
C                     POSITION ON TAPE AT EACH TABULAR POINT.
C  EPSB2        :R*4  ACCURACY CONSTANT FOR CONTROLLING SIZE IN NBODY
C                     INTEGRATION.  (NOT USED)
C  KB2(40)      :I*2  CONTROL CONSTANTS (NOT USED)
C  ITRT         :I*4  LEAST SQUARES ITERATION NUMBER DURING WHICH THE
C                     EPHEMERIS WAS INTEGRATED.
C  NPG          :I*4  PEP PRINTOUT PAGE NUMBER FOR INTEGRATION (START)
C  BMAS(NAST)   :R*8  MASS OF BODY IN UNITS OF SOLAR MASS.
C  RELFT(NAST)  :R*8  RELATIVITY MOTION FACTOR FOR EACH BODY
C  KKB2(80)     :I*2  CONTROL CONSTANTS
C  ICND(NAST)   :I*2  TYPE OF INITIAL CONDITIONS SPECIFIED ABOVE
C                     (0: ELLIPTIC)
C  CMAS(NAST)   :R*8  MASS OF BODY'S CENTER IN UNITS OF SOLAR MASS.
C  FR0(NAST)    :R*8  STARTING DAY FRACTION PAST JD0 FOR EPOCH.
C  LNKLVL       :C*4  LEVEL OF PEP THAT CREATED THE S-BODY
C  LEVP(NAST)   :C*4  LEVEL OF PEP FOR REPLACEMENTS MERGED INTO TAPE
C----------------------------------------------------------------------
C    FORMAT OF 3RD AND SUBSEQUENT RECORDS
C
C  JD           :I*4  DATE OF 1ST POINT IN THIS RECORD
C  FRACT        :R*8  FRACTION OF DAY PAST MIDNIGHT ON JD
C  IVL1         :I*4  NUMBER OF COORDINATES FOR 1ST CLASS OF BODIES
C                     (TYPICALLY 6, BUT COULD BE 3; ALSO COULD BE 1 IF
C                     THERE ARE NO SUCH BODIES)
C  IVL4         :I*4  NUMBER OF COORDINATES FOR 2ND CLASS OF BODIES
C  IVL8         :I*4  NUMBER OF COORDINATES FOR 3RD CLASS OF BODIES
C  BODY(IVL,N)  :R*8  BODY COORDINATES FOR EACH BODY
C----------------------------------------------------------------------
C*  START=100
C          GET TAPE NUMBERS
C           GET DEFAULT IVL LIMITS FOR OUTPUT
      READ(5,INPUT)
      WRITE(6,100) SHORT,TEST,DUMP,JD1,JD2,ERRLEV,CRDIN,CRDOUT,STOP,
     .     SKPHDR
  100 FORMAT(42X,'* * * * *  I N T R L V  * * * * *'/
     . '0 SHORT,TEST,DUMP=',3L3,'   TIME SPAN REQUEST=',I8,' -',I8,
     . '  ERRLEV=',I8/ '  CRDIN=',L2,'  CRDOUT=',L2,'  STOP=',L2,
     . '  SKPHDR=',L2)
C
C  * * *  TEMP  * * *
      JFIXQ=IVL8
C  * * *  TEMP  * * *
C
      ITERR=0
      DO 110 I=1,3
      IVLD(I)=IVLU(I)
      IF(IVLD(I).NE.3) IVLD(I)=6
  110 CONTINUE
      NTP=0
      DO 140 I=1,12
      J=ITAPE(I)
      ITAPE(I)=0
      IF(J.EQ.0) GOTO 140
      IF(J.GT.0.AND.J.LE.NTPTP.AND.J.NE.IOLD.AND.J.NE.INEW) GOTO 130
      WRITE(6,120) J
  120 FORMAT('0*** ILLEGAL TAPE NUMBER',I3)
      GOTO 140
  130 NTP=NTP+1
      ITAPE(NTP)=J
  140 CONTINUE
      WRITE(6,150) IOLD,INEW,IVLD,(ITAPE(I),I=1,NTP)
  150 FORMAT(
     1 '0 OLD=',I2,'  NEW=',I2,'  (DEFAULTS: IVL1=',I1,' IVL4=',I1,
     2 ' IVL8=',I1,')'/ '  INPUT=',12I3)
      IF(IOLD.GT.0) GOTO 170
      IF(NTP.LE.0) STOP 16
C           NO OLD TAPE AT ALL, MUST GET LIMITS AND INTR FROM CARD
      JDB1=JDE1
      JDB2=JDE2
C        GET HEADER FOR NEW TAPE
      READ(5,160) HEDCRD
  160 FORMAT(10A8)
      IREC=0
      NAST=0
      NPL(1)=0
      JDIE=JDB1
      FRCTIE=0D0
      GOTO 400
C        BUILDING FROM OLD S-BODY TAPE
  170 IREC=1
      IN=0
C READ TAPE TITLES
      IF(CRDIN) THEN
         READ(IOLD,180,END=9500) IHEAD
  180    FORMAT(20A4)
      ELSE
         READ(IOLD,END=9500) IHEAD
      ENDIF
C         NOW GET SPECIFIC HEADER INFO
      IREC=2
      IF(CRDIN) THEN
         READ(IOLD,190,END=9500,ERR=9000) NAST,JDB1,JDB2,
     .      NA1,NA4,NA8,INTR,JVLB2,EPSB2,EXTP,KB2,ITRT,NPG,KKB2,LNKLVL
  190    FORMAT(I5,2I8,5I5,1PE17.9,1X,A4/ 2(16I5/), 8I5,2I8/
     .    5(16I5/), A4)
         IF(EXTP.EQ.EXTPO) THEN
            READ(IOLD,191,END=9500,ERR=9000)
     .       (NPL(I),NCP(I),INTB(I),JD0(I),(BETA(J,I),J=1,6),
     .       (NAME(J,I),J=1,6),BMAS(I),RELFT(I),ICND(I),CMAS(I),
     .       FR0(I),LEVP(I),I=1,NAST)
  191       FORMAT((3I5,I10/ 2(3D26.19/),6A4,2D26.19/I5,2D26.19,1X,A4))
         ELSE
            READ(IOLD,192,END=9500,ERR=9000)
     .       (NPL(I),NCP(I),INTB(I),JD0(I),(BETA(J,I),J=1,6),
     .       (NAME(J,I),J=1,6),BMAS(I),RELFT(I),ICND(I),CMAS(I),
     .       FR0(I),LEVP(I),I=1,NAST)
  192       FORMAT((3I5,I10/ 2(3D25.17/),6A4,2D25.17/I5,2D25.17,1X,A4))
         ENDIF
      ELSE
         IF(SHORT) THEN
            READ(IOLD,END=9500,ERR=9000) NAST,(NPL(I),I=1,NAST),(NCP(I),
     .         I=1,NAST),(INTB(I),I=1,NAST),JDB1,JDB2,(JD0(I),I=1,NAST),
     .         ((BETA(J,I),J=1,6),I=1,NAST),((NAME(J,I),J=1,6),I=1,
     .         NAST),NA1,NA4,NA8,INTR
         ELSE
            READ(IOLD,END=9500,ERR=9000) NAST,(NPL(I),I=1,NAST),(NCP(I),
     .         I=1,NAST),(INTB(I),I=1,NAST),JDB1,JDB2,(JD0(I),I=1,NAST),
     .         ((BETA(J,I),J=1,6),I=1,NAST),((NAME(J,I),J=1,6),I=1,
     .         NAST),NA1,NA4,NA8,INTR,JVLB2,EPSB2,KB2,ITRT,NPG,(BMAS(I),
     .         I=1,NAST),(RELFT(I),I=1,NAST),KKB2,(ICND(I),I=1,NAST),
     .         (CMAS(I),I=1,NAST),(FR0(I),I=1,NAST),LNKLVL,
     .         (LEVP(I),I=1,NAST)
         ENDIF
      ENDIF
      IF(JDE1.EQ.0) JDE1=JDB1
      IF(JDE2.EQ.0) JDE2=JDB2
      IREC=3
C           TAKE A PEEK AT FIRST RECORD
      IF(CRDIN) THEN
         IF(EXTP.EQ.EXTPO) THEN
            READ(IOLD,200,END=9500,ERR=9000) JDIE,FRCTIE
  200       FORMAT(I10,1PD26.19,3I5/ (3D26.19))
         ELSE
            READ(IOLD,201,END=9500,ERR=9000) JDIE,FRCTIE
  201       FORMAT(I10,1PD25.17,3I5/ (3D25.17))
         ENDIF
      ELSE
         READ(IOLD,END=9500,ERR=9000) JDIE,FRCTIE
      ENDIF
      BACKSPACE IOLD
C*  START=400
C           SET UP SOME CONSTANTS
  400 NS1=1
      NE1=40*NA1
      NS4=NE1+1
      NE4=NE1+10*NA4
      NS8=NE4+1
      NE8=NE4+5*NA8
C           CHANGE LIMITS SO THAT LOGICAL RANGE=ACTUAL RANGE
      IF(NE1.LE.NS1) NE1=NS1
      IF(NE4.LE.NS4) NE4=NS4
      IF(NE8.LE.NS8) NE8=NS8
C           DETERMINE WHICH CLASSES ARE REPRESENTED
      NAF=0
      IF(NA1.GT.0) NAF=1
      IF(NA4.GT.0) NAF=NAF+2
      IF(NA8.GT.0) NAF=NAF+4
      IF(NAF.EQ.0) NAF=8
      DO 410 I=1,3
        LNA(I+1)=LNA(I)+NA(I)
        NB(I)=NA(I)
        NNO(I)=NA(I)
  410 END DO
      IDIR=1
      IF(JDB2.LT.JDB1) IDIR=-1
      I1=-IDIR+2
      IF(IDIR*(JD2-JD1).GT.0) GOTO 420
      JDI=JD1
      JD1=JD2
      JD2=JDI
  420 CONTINUE
C           USUAL INTERVAL CONVENTION
      D1=INTR
      IF(INTR.LE.0) D1=2.**INTR
      D4=D1*4D0
      D8=D1*8D0
      DR=D8*IDIR
      DR5=DR*5D0
      INTQ(1)=INTR
      INTQ(2)=INTR+2
      IF(D4.GE.1D0) INTQ(2)=D4
      INTQ(3)=INTR+3
      IF(D8.GE.1D0) INTQ(3)=D8
      NASU=NAST
      TIE=JDIE+FRCTIE
C           WRITE HEADERS FROM OLD TAPE
      IF(.NOT.SKPHDR) WRITE(6,450) SP,IOLD,IHEAD
      IF(NAST.GT.0) GOTO 430
      IF(.NOT.SKPHDR) WRITE(6,460) IDIR,JDB1,JDB2
      GOTO 800
  430 DO 440 I=1,NAST
      IREF(I)=I
      TPL(I)=JD0(I)
      TPL(I)=TPL(I)+FR0(I)-0.5D0
  440 CONTINUE
      IF(SKPHDR) GOTO 600
      WRITE(6,460) IDIR,JDB1,JDB2,NAST,NA,INTR
      WRITE(6,470) (NPL(J),(NAME(I,J),I=1,6),TPL(J),(BETA(I,J),I=1,3),
     1  NCP(J),ICND(J),(BETA(I,J),I=4,6),BMAS(J),CMAS(J),J=1,NAST)
  450 FORMAT(A1,' HEADER INFORMATION FOR DATA SET',I3/1X,32A4)
  460 FORMAT('  IDIR =',I2,'  JD1=',I8,'  JD2=',I8,I6,' BODIES (N1=',I2,
     1 '  N4=',I2,'  N8=',I2,')  INT=',I3,'  INITIAL CONDITIONS ARE')
  470 FORMAT('0',I3,1X,6A4,' JD0=',0PF11.3,' A=',1PD22.15,4X,
     . 'E=',D22.15,5X,'INC=',D22.15/
     . 5X,'NCP=',I2,' ICND=',I2,25X,'ASC=',D22.15,'  PER=',D22.15,
     . 3X,'ANOM0=',D22.15/ 9X,5HMASS=,D22.15,'  CMASS=',D22.15)
C*  START=600
C
C           READ AND USE ANY PLANET NUMBER CORRECTION CARDS
  600 CONTINUE
      READ(5,610,END=800) NP1,NC1,NP2,NC2
  610 FORMAT(4I4)
      IF(.NOT.EDITT) WRITE(6,620)
  620 FORMAT('-',10X,'EDITING CARDS'/'  IOLD:  NP, NC BECOMES NP, NC')
      EDITT=.TRUE.
      DO 630 I=1,NAST
      IF(NPL(I).NE.NP1.OR.NCP(I).NE.NC1) GOTO 630
      NPL(I)=NP2
      NCP(I)=NC2
      IYN=1
      GOTO 640
  630 CONTINUE
      IYN=2
  640 WRITE(6,650) NP1,NC1,NP2,NC2,YESNO(IYN)
  650 FORMAT(2(7X,2I4),2X,A2)
      GOTO 600
C*  START=800
C
C           SAVE OLD LIMITS, REPLACE WITH REQUESTED
  800 CONTINUE
      JDA1=JDB1
      JDB1=JDE1
      JDA2=JDB2
      JDB2=JDE2
C        SET PHASE SWITCH - NOW INSERTING NEW INFO
      IPHS=1
C           READ EACH INPUT TAPE HEADER AND SET UP
      JTP=1
  810 IF(JTP.GT.NTP) GOTO 2000
      IN=ITAPE(JTP)
      JREC(JTP)=1
      READ(IN,END=9500) JHEAD
      JREC(JTP)=2
      READ(IN,END=9500,ERR=9000) NPLN,NCNT,IPAR,INT,JDP1,JDP0,JDP2,
     .  COND,CON,PRM,EPS,KP,IPAG,ITERAT,JCND,INT1,INT2,IHR,IMIN,SEC,KKP,
     .  IFILTR,LEVJ
      WRITE(6,820) IN,JHEAD,IPAG,ITERAT,NPLN,NCNT,IPAR,INT,JDP1,JDP0,
     .  JDP2,INT1,INT2,IHR,IMIN,SEC,COND,JCND
  820 FORMAT('-   INFO FROM INPUT DATA SET',I3,5X,'(',2A4,')'/10X,18A4,
     1 '  DATE=',2A4,' PAGE=',I4,' ITERATION=',I3/ '  NPLNT=',I3,
     2 '  NCENTR=',I3,'  IPAR=',I3,'  INT=',I3,'  JD1=',I7,' JD0=',I7,
     3 ' JD2=',I7,'  INT1=',I3,' INT2=',I3,'  TIME=',2I3,F6.2,
     4 /10X,'A=',1PD22.15,5X,'E=',D22.15,5X,'INC=',D22.15 /
     5 8X,'ASC=',D22.15,3X,'PER=',D22.15,3X,'ANOM0=',D22.15/5X,'ICND=',
     6 I2)
      TNAME(JTP)=PNAME
      IPAM(JTP)=IPAR-1
      DIN(JTP)=INT
      IF(INT.LE.0) DIN(JTP)=2D0**INT
      IF(DIN(JTP).LE.D8) GOTO 1100
C*  START=900
C
C        ERROR SECTION FOR REJECTING AN INPUT TAPE
      WRITE(6,900)
  900 FORMAT('0TABULAR INTERVAL TOO BIG ON INPUT TAPE')
  910 NTP=NTP-1
      DO 920 J=JTP,NTP
         ITAPE(J)=ITAPE(J+1)
  920 END DO
      GOTO 810
C           PLANET ALREADY FOUND FROM INPUT TAPES
  930 KN=MOD(KN,100)
      WRITE(6,940) KN,ITAPE(KN)
  940 FORMAT('0DUPLICATES ANOTHER INPUT TAPE, ITAPE(',I2,')=',I2)
      GOTO 910
C           SAME PLANET NUMBER, BUT DIFFERENT CENTER
  950 WRITE(6,960) PNAME,NPLN
  960 FORMAT('0*** PLANET ',A8,' (NPL=',I2,') DOES NOT MATCH PROPERLY')
      GOTO 910
C*  START=1100
C           TEST INTEGRATION METHOD
 1100 IF(KP(88).GT.0) GOTO 1120
      WRITE(6,1110)
 1110 FORMAT('0TAPE IS VARIABLE STEP SIZE, CAN''T INTERLEAVE')
      GOTO 910
 1120 IF(NPLN.GT.0) GOTO 1140
      WRITE(6,1130) PNAME,NPLN
 1130 FORMAT('0***',A8,' HAS NEGATIVE PLANET NUMBER',I4,' ***')
      GOTO 910
C
C           MATCH DIRECTIONS AND TIME RANGES
 1140 JDIR=1
      IF(JDP2.LE.JDP1) JDIR=-1
      JDN1(JTP)=MIN0(JDP1,JDP2)
      JDN2(JTP)=MAX0(JDP1,JDP2)
      IF(JDB(I1).LT.JDN2(JTP).AND. JDB(IDIR+2).GT.JDN1(JTP)) GOTO 1300
      WRITE(6,1150) IN
 1150 FORMAT('0RANGE OF TIME ON INPUT TAPE',I3,' DOES NOT OVERLAP.')
      GOTO 910
C*  START=1300
C           SEE IF PLANET NUMBER IS ALREADY ON OLD TAPE
 1300 JM=0
      IF(NASU.LE.0) GOTO 1400
      DO 1320 I=1,NASU
      IF(NPL(I).NE.NPLN) GOTO 1320
      IF(NCP(I).NE.NCNT) GOTO 950
C           ASSUME IT IS THE SAME NOW
      JAST=I
      KAST=I
      KN=-IREF(I)
      IF(KN.GT.0) GOTO 930
      GOTO 2015
 1320 CONTINUE
C           NOT FOUND ON OLD TAPE, MUST INSERT INTO LIST
      IF(NASU.LT.12) GOTO 1400
      WRITE(6,1330) PNAME
 1330 FORMAT('0*** PLANET ',A8,' WILL NOT FIT ONTO OUTPUT TAPE')
      GOTO 910
C*  START=1400
C        NOW MUST FIND WHERE TO INSERT BODY:
C        A) NEW (JM=0), B) OLD, BUT DIFFERENT CLASS NOW (JM=OLD CLASS)
 1400 DO 1410 KM=1,3
      IF(DIN(JTP).LE.D(KM)) GOTO 1420
 1410 CONTINUE
C           CAN'T HAPPEN
      STOP 115
 1420 IF(MOD(D(KM),DIN(JTP)).EQ.0D0)GOTO 1440
      WRITE(6,1430) DIN(JTP),D(KM)
 1430 FORMAT('0*** INCOMMENSURABLE INT:',1P,2D12.4)
      IF(JM.NE.0) NNO(JM)=NNO(JM)+1
      GOTO 910
 1440 IF(KM.EQ.JM) GOTO 1540
      IF(JM.GT.0) GOTO 1450
      KN=0
      OLDFL(JTP)=.FALSE.
      GOTO 1520
 1450 ALTER=.TRUE.
C*  START=1500
C
C           REMOVE ENTRY AT 'JAST' AND REINSERT AT NEW PLACE
 1500 NASU=NASU-1
      DO 1511 J=JAST,NASU
C           SHIFT EVERYTHING DOWN ONE
        IREF(J)=IREF(J+1)
        NPL(J)=NPL(J+1)
        NCP(J)=NCP(J+1)
        JD0(J)=JD0(J+1)
        FR0(J)=FR0(J+1)
        INTB(J)=INTB(J+1)
        ICND(J)=ICND(J+1)
        BMAS(J)=BMAS(J+1)
        RELFT(J)=RELFT(J+1)
        CMAS(J)=CMAS(J+1)
        LEVP(J)=LEVP(J+1)
        DO 1510 K=1,6
            NAME(K,J)=NAME(K,J+1)
            BETA(K,J)=BETA(K,J+1)
 1510   END DO
 1511 END DO
      NB(JM)=NB(JM)-1
      GOTO (1520,2010), IPHS
C            INSERT NEW PLANET AT 'KAST'
C           CRITERION - PUT AT LAST PLACE IN ITS CATEGORY (KM)
 1520 NASO=NASU
      NASU=NASU+1
      NB(KM)=NB(KM)+1
      KAST=NB(1)
      IF(KM.EQ.2) KAST=KAST+NB(2)
      IF(KM.EQ.3) KAST=NASU
      IF(KAST.GE.NASU) GOTO 1540
C           SHIFT EVERYTHING UP ONE
      IXN=KAST+NASO
      DO 1531 J=KAST,NASO
        IY=IXN-J
        IREF(IY+1)=IREF(IY)
        NPL (IY+1)=NPL (IY)
        NCP(IY+1)=NCP(IY)
        JD0 (IY+1)=JD0 (IY)
        FR0 (IY+1)=FR0(IY)
        INTB(IY+1)=INTB(IY)
        ICND(IY+1)=ICND(IY)
        BMAS(IY+1)=BMAS(IY)
        RELFT(IY+1)=RELFT(IY)
        CMAS(IY+1)=CMAS(IY)
        LEVP(IY+1)=LEVP(IY)
        DO 1530 K=1,6
            NAME(K,IY+1)=NAME(K,IY)
            BETA(K,IY+1)=BETA(K,IY)
 1530   END DO
 1531 END DO
C        INSERT NEW INFO INTO ARRAYS
 1540 IREF(KAST)=-JTP+100*KN
      NPL(KAST)=NPLN
      NCP(KAST)=NCNT
      JD0(KAST)=JDP0
      FR0(KAST)=INT1*2D0**INT2
      INTB(KAST)=INTQ(KM)
      ICND(KAST)=JCND
      BMS=0D0
      IF(NPLN.LE.30) BMS=PRM(NPLN)
      CMS=1D0
      IF(NCNT.GT.0) CMS=PRM(NCNT)
      BMAS(KAST)=CMS*BMS
      CMAS(KAST)=CMS
      RELFT(KAST)=PRM(31)
      LEVP(KAST)=LEVJ
      DO 1550 I=1,6
        NAME(I,KAST)=JHEAD(I)
        BETA(I,KAST)=COND(I)
 1550 END DO
      NAME(5,KAST)=JHEAD(21)
      NAME(6,KAST)=JHEAD(22)
C        INITIALIZE INPUT TAPE QUANTITIES
      JCOPY(JTP)=0
      JREC(JTP)=3
      ILOSE(JTP)=0
      IER(JTP)=0
      KMS(JTP)=KM
      DIN(JTP)=DIN(JTP)*JDIR
      DI5(JTP)=DIN(JTP)*5D0
      DO(JTP)=D(KM)*IDIR
      IDED(JTP)=DO(JTP)/DIN(JTP)
C        COLLECT MAXIMUM RANGE OF INPUT BODY TAPES
      JDM1=MIN0(JDM1,JDN1(JTP))
      JDM2=MAX0(JDM2,JDN2(JTP))
C        MOVE ON TO NEXT TAPE
      JTP=JTP+1
      GOTO 810
C*  START=2000
C
C        SET SWITCH FOR DELETING EDITED BODIES
 2000 IPHS=2
      JAST=1
 2010 IF(JAST.GT.NASU) GOTO 2030
      IF(NPL(JAST).GT.0) GOTO 2020
      KN=-IREF(JAST)
      JTP=KN
      IF(KN.GT.0) KN=-KN/100
C           GET CATEGORY OF BODY  (1, 4, OR 8)
 2015 MKN=-KN
      JM=1
      IF(MKN.GE.LNA(2)) JM=2
      IF(MKN.GE.LNA(3)) JM=3
      IF(JTP.GT.0) NNO(JM)=NNO(JM)-1
      IF(IPHS.EQ.2) GOTO 1500
      OLDFL(JTP)=.TRUE.
      KM=JM
      IF(DIN(JTP).EQ.D(KM)) GOTO 1540
      IF(JDN1(JTP).LE.JDA(I1).AND.JDN2(JTP).GE.JDA(IDIR+2)) GOTO 1400
C        INPUT TAPE INCOMPLETELY COVERS RANGE OF OLD TAPE
      IF(DIN(JTP).LT.D(KM)) GOTO 1540
      GOTO 1400
C
 2020 JAST=JAST+1
      GOTO 2010
C        BE SURE SOME OUTPUT BODIES REMAIN
 2030 IF(NASU.GT.0) GOTO 2050
      WRITE(6,2040)
 2040 FORMAT('-*** NO BODIES FOR OUTPUT ***')
      STOP 4
C           SET UP CONSTANTS FOR WRITING OUTPUT TAPE
 2050 CONTINUE
      MAF=0
      IF(NB1.GT.0) MAF=1
      IF(NB4.GT.0) MAF=MAF+2
      IF(NB8.GT.0) MAF=MAF+4
      IUP=0
C           ALLOW EXTRA SPACE FOR SORTING, IF NEEDED
      IF(ALTER) IUP=480-(INUM(1)*NB(1)+INUM(2)*NB(2)+INUM(3)*NB(3))
      MS1=IUP+1
      ME1=IUP+40*NB1
      MS4=ME1+1
      ME4=ME1+10*NB4
      MS8=ME4+1
      ME8=ME4+5*NB8
C           CHANGE LIMITS SO THAT LOGICAL RANGE=ACTUAL RANGE
      IF(ME1.LE.MS1) ME1=MS1
      IF(ME4.LE.MS4) ME4=MS4
      IF(ME8.LE.MS8) ME8=MS8
C           SET LIMITS TO WIDEST EXTENT FILLED WITH BODY TAPES
C                  (IF LESS THAN REQUEST AND MORE THAN OLD)
      IF((JDM(IDIR+2)-JDB2)*IDIR.LT.0.AND.(JDM(IDIR+2)-JDA2)*IDIR.GE.0)
     1     JDB2=JDM(IDIR+2)
      IF((JDM(I1)    -JDB1)*IDIR.GT.0.AND.(JDM(I1)    -JDA1)*IDIR.LE.0)
     1     JDB1=JDM(I1)
C*  START=2200
C           SET UP OFFSETS FOR OLD RETAINED PLANETS AND NEW INPUT
      DO 2200 J=1,3
         LNB(J+1)=LNB(J)+NB(J)
 2200 END DO
      JM=1
      LMA(1)=1
      IF(NAST.LE.0) GOTO 2230
      DO 2220 J=1,NAST
 2210   IF(J.LT.LNA(JM+1)) GOTO 2220
        JM=JM+1
        GOTO 2210
        LMA(J+1)=LMA(J)+INUM(JM)
 2220 END DO
 2230 NST=MS1
      JM=1
      KM=1
      DO 2290 I=1,NASU
        JAST=IREF(I)
        JAST=MAX0(JAST,-JAST/100)
        IF(JAST.LE.0) GOTO 2250
C        GET CLASS OF THIS BODY ON OLD TAPE
 2240   IF(JAST.LT.LNA(JM+1)) GOTO 2250
        JM=JM+1
        GOTO 2240
C        GET CLASS OF THIS BODY ON NEW TAPE
 2250   IF(I.LT.LNB(KM+1) ) GOTO 2260
        KM=KM+1
        GOTO 2250
C        GET LIMITS WITHIN RECORD FOR THIS BODY'S COORDS
 2260   NSK(I)=NST
        NST=NST+INUM(KM)
        NSKE(I)=NST-1
        IF(JAST.LE.0) GOTO 2280
C        OFFSET FOR AN OLD BODY
        IDSP(JAST)=NSK(I)-LMA(JAST)
        IF(KM.GE.JM) GOTO 2270
        IDSF(JAST)=-INUM(KM)/INUM(JM)
        GOTO 2280
 2270   IDSF(JAST)= INUM(JM)/INUM(KM)
 2280   CONTINUE
        TPL(I)=JD0(I)
        TPL(I)=TPL(I)+FR0(I)-0.5D0
 2290 END DO
C*  START=2400
C         REPLACE PART OF HEADER WITH SIGNATURE
      DO 2400 I=1,6
         HED2(I)=HED2I(I)
 2400 END DO
      IF(SKPHDR) GOTO 2410
      WRITE(6,450) PG,INEW,IHEAD
      WRITE(6,460) IDIR,JDB1,JDB2,NASU,NB,INTR
      WRITE(6,470) (NPL(J),(NAME(I,J),I=1,6),TPL(J),(BETA(I,J),I=1,3),
     1  NCP(J),ICND(J),(BETA(I,J),I=4,6),BMAS(J),CMAS(J),J=1,NASU)
 2410 IF(STOP) GOTO 5105
C           START WRITING NEW COMBINED TAPE
      IF(INEW.LE.0) GOTO 2500
      IF(CRDOUT) THEN
         WRITE(INEW,180) IHEAD
         WRITE(INEW,190) NASU,JDB1,JDB2,
     .      NB,INTR,JVLB2,EPSB2,EXTPO,KB2,ITRT,NPG,KKB2,LNKLVL
         WRITE(INEW,191)
     .     (NPL(I),NCP(I),INTB(I),JD0(I),(BETA(J,I),J=1,6),
     .      (NAME(J,I),J=1,6),BMAS(I),RELFT(I),ICND(I),CMAS(I),
     .      FR0(I),LEVP(I),I=1,NASU)
      ELSE
         WRITE(INEW) IHEAD
         WRITE(INEW) NASU,(NPL(I),I=1,NASU),(NCP(I),I=1,NASU),(INTB(I),
     .      I=1,NASU),JDB1,JDB2,(JD0(I),I=1,NASU),((BETA(J,I),J=1,6),
     .      I=1,NASU),((NAME(J,I),J=1,6),I=1,NASU),NB,INTR,JVLB2,EPSB2,
     .      KB2,ITRT,NPG,(BMAS(I),I=1,NASU),(RELFT(I),I=1,NASU),KKB2,
     .      (ICND(I),I=1,NASU),(CMAS(I),I=1,NASU),(FR0(I),I=1,NASU),
     .      LNKLVL,(LEVP(I),I=1,NASU),ZERO,ZERO,ZERO
      ENDIF
 2500 KREC=2
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C*  START=3000
C        SEE IF REQUESTED START IS BEFORE OR AFTER OLD TAPE START
      IF((JDB1-JDA1)*IDIR.GE.0) GOTO 3000
C           MUST START OUTPUT TAPE BEFORE PICKING UP WITH OLD TAPE
      I=(TIE-JDA1)/DR5
      TI=TIE-(I+1)*DR5
      STF=.FALSE.
 3000 IF(STF) GOTO 3010
      IF(TI.NE.TIE) GOTO 3120
C           FINISHED PADDING AT BEGINNING, NOW PICK UP OLD TAPE
      STF=.TRUE.
      GOTO 3000
C           READ OLD TAPE IN PROPER FORMAT
 3010 IF(NAF.EQ.8) GOTO 3020
      IF(JFIXQ.EQ.-123) GOTO 3030
      GOTO 3040
C           GENERATING NEW TAPE, MIMIC OLD INPUT
 3020 JDI=JDIE
      FRCTI=FRCTIE
      GOTO 3110
C           SPECIAL CASE FOR CURING EXCEPTIONAL TAPE
 3030 READ(IOLD,END=5000,ERR=9010) JDI,FRCTI,IVL1,IVL4,IVL8,
     1   ((BODY(I,J),I=1,IVL1),J=1,NE1),((BODY(I,J),I=1,IVL4),J=NS4,NE4)
      GOTO 3050
C           ORDINARY READ
 3040 IF(CRDIN) THEN
         IF(EXTP.EQ.EXTPO) THEN
            READ(IOLD,200,END=5000,ERR=9010) JDI,FRCTI,IVL1,IVL4,IVL8,
     1   ((BODY(I,J),I=1,IVL1),J=1,NE1),((BODY(I,J),I=1,IVL4),J=NS4,NE4)
     2,  ((BODY(I,J),I=1,IVL8),J=NS8,NE8)
         ELSE
            READ(IOLD,201,END=5000,ERR=9010) JDI,FRCTI,IVL1,IVL4,IVL8,
     1   ((BODY(I,J),I=1,IVL1),J=1,NE1),((BODY(I,J),I=1,IVL4),J=NS4,NE4)
     2,  ((BODY(I,J),I=1,IVL8),J=NS8,NE8)
         ENDIF
      ELSE
         READ(IOLD,END=5000,ERR=9010) JDI,FRCTI,IVL1,IVL4,IVL8,
     1   ((BODY(I,J),I=1,IVL1),J=1,NE1),((BODY(I,J),I=1,IVL4),J=NS4,NE4)
     2,  ((BODY(I,J),I=1,IVL8),J=NS8,NE8)
      ENDIF
C           INSURE PROPER SEQUENCING
 3050 IF(JDI.EQ.JDIE.AND.FRCTI.EQ.FRCTIE) GOTO 3100
      WRITE(6,3060) IREC,JDI,FRCTI,JDIE,FRCTIE
 3060 FORMAT('0UNEXPECTED TIME ON RECORD',I5,' OF OLD TAPE',I8,F8.7,'SHO
     1ULD BE',I8,F8.7)
      IF(FRCTI.LT.0D0.OR.FRCTI.GE.1D0) FRCTI=FRCTIE
      IF(IABS(JDI-JDIE).GT.100) JDI=JDIE
      ITERR=ITERR+1
      IF(ITERR.GT.ERRLEV) GOTO 9030
C*  START=3100
 3100 IREC=IREC+1
 3110 TIE=TIE+DR5
      JDIE=TIE
      FRCTIE=TIE-JDIE
C        SEE IF WITHIN OUTPUT TAPE RANGE YET
      IF((JDI-JDB1)*IDIR.LT.0) GOTO 3000
      GOTO 3300
C           BEFORE START OF INPUT, IMITATE TIME VALUES
 3120 JDI=TI
      FRCTI=TI-JDI
      TI=TI+DR5
C*  START=3300
C           SHIFT ANY RETAINED OLD INFO TO PROPER PLACE IN NEW RECORD
 3300 IF((JDI-JDB2)*IDIR.GT.0) GOTO 5100
      KAST=NASU+1
      DO 3330 JJ=1,NASU
      KAST=KAST-1
      KN=IREF(KAST)
      J=MAX0(KN,-KN/100)
      IF(J.LE.0) GOTO 3330
      KD=IDSF(J)
      IF(KD.LT.0) GOTO 3330
      IF(KD.EQ.1.AND.IDSP(J).EQ.0) GOTO 3330
C        MUST SHIFT INFO
      K=LMA(J+1)
      KA=LMA(J)
      KK=NSKE(KAST)
 3310 K=K-KD
      DO 3320 KI=1,6
         BODY(KI,KK)=BODY(KI,K)
 3320 END DO
      KK=KK-1
      IF(K.GT.KA) GOTO 3310
 3330 CONTINUE
C            COPY INTO OLD RECORD
      DO 3340 I=1,3
      IF(IVLU(I).GT.IVLD(I)) IVLU(I)=IVLD(I)
      IVLT(I)=IVLU(I)
      IF(NNO(I).LE.0) IVLT(I)=IVLD(I)
      IF(NB(I).LE.0) IVLT(I)=1
 3340 CONTINUE
C*  START=3500
C           SET UP COPY LOOP
      DO 3770 KDX=1,NASU
      IF(IREF(KDX).GE.0) GOTO 3770
      JTP=-IREF(KDX)
      JTP=MOD(JTP,100)
      IN=ITAPE(JTP)
      KM=KMS(JTP)
      NS=NSK(KDX)
      NE=NSKE(KDX)
      T=JDI+FRCTI
      DO 3760 IQ=NS,NE
        IQQ=IQ-IUP
        JDT=T
        ID=IDR(JTP)
        IF(ID.GT.0.AND.ID.LT.6.AND..NOT.ZERFL(JTP)) GOTO 3700
        IF(JDT.LT.JDN2(JTP).AND.JDT.GE.JDN1(JTP)) GOTO 3510
C           POINT IS OUT OF RANGE (OR I/O ERRORS)
 3500   ZERFL(JTP)=.TRUE.
        GOTO 3700
C           TEST IF A PROPER RECORD EXISTS IN CORE
 3510   IF(ZERFL(JTP)) GOTO 3600
        ID=IDR(JTP)
        IF(ID.GT.0.AND.ID.LT.6) GOTO 3700
        IF(ID.GT.5.AND.ID.LT.11) GOTO 3600
        DJD=JDJ(JTP)+FRCTJ(JTP)
        DJD=(T-DJD)/DI5(JTP)-1D0
C           SEE WHERE TO GO FOR PROPER RECORD
        IF(DJD.GE.0D0) GOTO 3530
C           MOVE BACK ON TAPE
        N=-DJD+ 0.99999999999D0
        DO 3520 I=1,N
        IF(JREC(JTP).LE.3) GOTO 3500
        BACKSPACE IN
        JREC(JTP)=JREC(JTP)-1
 3520   CONTINUE
        GOTO 3600
C           MOVE FORWARD ON TAPE
 3530   N=DJD
        IF(N.LE.0) GOTO 3600
        DO 3540 I=1,N
            READ(IN,ERR=3540,END=3620)
            JREC(JTP)=JREC(JTP)+1
 3540   END DO
C*  START=3600
C           PROPER RECORD IS NEXT
 3600   IPM=IPAM(JTP)
        IF(IPM.GT.0) READ(IN,ERR=3640,END=3620) JDJ(JTP),FRCTJ(JTP),IVLJ
     1       ,((PLAN(I,J,JTP),I=1,IVLJ),((PD,I=1,IVLJ),K=1,IPM),J=1,5)
        IF(IPM.LE.0) READ(IN,ERR=3640,END=3620) JDJ(JTP),FRCTJ(JTP),IVLJ
     1       ,((PLAN(I,J,JTP),I=1,IVLJ),J=1,5)
        JREC(JTP)=JREC(JTP)+1
        JCOPY(JTP)=JCOPY(JTP)+1
        DJD=JDJ(JTP)+FRCTJ(JTP)
        IDR(JTP)=(T-DJD)/DIN(JTP)+1D0
        IER(JTP)=0
        ZERFL(JTP)=.FALSE.
        IF(TEST) WRITE(6,3610) JTP,IN,IPM,IDR(JTP),JREC(JTP),DJD
 3610   FORMAT('0***TAPE(',I1,')=',I2,' IPAR-1=',I2,' ID=',I3,
     1  '  REC.NO.+1=',I3,'   JD+.5=',F15.3)
        GOTO 3510
 3620   BACKSPACE IN
        BACKSPACE IN
        JREC(JTP)=JREC(JTP)-1
C           NOW BACK ONTO THE FILE
        WRITE(6,3630) IN,JREC(JTP)
 3630   FORMAT('0UNEXPECTED EOF ON INPUT TAPE',I3,' AFTER RECORD',I5)
        GOTO 3500
C           ERROR ON NEEDED RECORD
 3640   JDJ(JTP)=JDT
        FRCTJ(JTP)=-2D0
        IER(JTP)=IER(JTP)+1
        JREC(JTP)=JREC(JTP)+1
        IF(IER(JTP).LT.5) GOTO 3510
C           TOO MANY ERRORS
        WRITE(6,3650) IN,JREC(JTP),T
 3650   FORMAT('0*** READ ERROR ON INPUT TAPE',I3,' RECORD',I5,
     .  '  LOOKING FOR TIME=',F15.7)
        GOTO 3500
C*  START=3700
C           COPY PLAN INTO BODY
 3700   IVL=IVLT(KM)
        DO 3740 I=1,IVL
        IF(ZERFL(JTP)) GOTO 3730
        BODY(I,IQ)=PLAN(I,ID,JTP)
        IF(I.EQ.1.AND.TEST) WRITE(6,3710) IQQ,ID,PLAN(1,ID,JTP),IVL
 3710   FORMAT(' BODY(1,',I2,') = PLAN(1,',I1,') = ',1PD15.6,' IVL=',I3)
        IF(I.LE.IVLJ) GOTO 3740
        IVLT(KM)=IVLJ
        ILOSE(JTP)=ILOSE(JTP)+1
        IF(ILOSE(JTP).EQ.1) WRITE(6,3720) IN,JREC(JTP),T
 3720   FORMAT('0*** TAPE',I3,' HAS TOO FEW COORDINATES IN RECORD',I5,'
     1  TIME=',F15.7)
        GOTO 3750
C          WRITE ZEROES IF ALL ELSE FAILS
 3730   IF(.NOT.OLDFL(JTP)) BODY(I,IQ)=0D0
        IF(OLDFL(JTP)) IVLT(KM)=MIN0(IVLT(KM),IVLU(KM) )
 3740   CONTINUE
 3750   IDR(JTP)=IDR(JTP)+IDED(JTP)
        T=T+DO(JTP)
 3760 END DO
 3770 CONTINUE
C*  START=4000
C           WRITE RECORD
      IF(INEW.LE.0) GOTO 4000
      IF(CRDOUT) THEN
         WRITE(INEW,200) JDI,FRCTI,IVLT,
     .      ((BODY(I,J),I=1,IVT1),J=MS1,ME1),
     .      ((BODY(I,J),I=1,IVT4),J=MS4,ME4),
     .      ((BODY(I,J),I=1,IVT8),J=MS8,ME8)
      ELSE
         WRITE(INEW) JDI,FRCTI,IVLT,
     .      ((BODY(I,J),I=1,IVT1),J=MS1,ME1),
     .      ((BODY(I,J),I=1,IVT4),J=MS4,ME4),
     .      ((BODY(I,J),I=1,IVT8),J=MS8,ME8), ZERO
      ENDIF
 4000 CONTINUE
      KREC=KREC+1
      IF(.NOT.DUMP.AND..NOT.TEST) GOTO 3000
      WRITE(6,4010) KREC,JDI,FRCTI,IVLT
 4010 FORMAT('  RECORD',I4,' WRITTEN FOR JD=',I8,F3.2,'  IVL=',3I3)
      IF(DUMP) WRITE(6,4020) ((BODY(I,J),I=1,3),J=MS1,ME8)
 4020 FORMAT((2(5X,1P,3D20.13)))
      GOTO 3000
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C*  START=5000
C
C           END OF OLD TAPE, JOB DONE UNLESS EXTENSION IS ALLOWED
 5000 NAF=8
      NAST=0
      DO 5010 I=1,2880
         BODY(I,1)=0D0
 5010 END DO
      DO 5020 I=1,12
        OLDFL(I)=.FALSE.
        IDSP(I)=0
 5020 END DO
      NNO(1)=0
      NNO(2)=0
      NNO(3)=0
      WRITE(6,5030) IOLD,IREC
 5030 FORMAT('0END OF INPUT DATA SET',I3,' AFTER',I5,' RECORDS'/)
      GOTO 3000
C*  START=5100
C           END OF DESIRED RANGE, ALL DONE
 5100 IF(INEW.GT.0) THEN
         ENDFILE INEW
         REWIND INEW
      ENDIF
 5105 IF(IOLD.GT.0) REWIND IOLD
      IREC=IREC-1
      WRITE(6,5110) IREC,KREC
 5110 FORMAT('0FINISHED MERGING,',I5,' OLD RECORDS IN,',I5,
     . ' NEW RECORDS OUT')
      IF(NTP.LE.0.OR.STOP) GOTO 5140
      DO 5120 I=1,NTP
      IN=ITAPE(I)
      REWIND IN
 5120 CONTINUE
      WRITE(6,5130) (JTP,TNAME(JTP),JDN1(JTP),JDN2(JTP),
     1  JCOPY(JTP),ILOSE(JTP),JTP=1,NTP)
 5130 FORMAT(2(8X,'NAME',7X,'JD RANGE',8X,'RECORDS  SHORT RECS  ')/
     1 ( 2(I4,'.',A8,' (',I7,'-',I7,')',2I10,4X) ) )
 5140 STOP
C*  START=9000
C            ERRORS
 9000 CONTINUE
      JFLG=1
      GOTO 9510
 9010 CONTINUE
      WRITE(6,9020)  IREC
 9020 FORMAT('0*** READ ERROR ON OLD TAPE AT RECORD',I5)
      IF(.NOT.CRDIN) READ(IOLD)
      IREC=IREC+1
      GOTO 3020
 9030 IN=0
      WRITE(6,9040) ITERR
 9040 FORMAT('0** EXCESSIVE TIME ERRORS:',I8,' BAD RECORDS')
      GOTO 9510
C*  START=9500
 9500 CONTINUE
      JFLG=2
 9510 KRE=IREC
      IF(IN.GT.0) KRE=JREC(JTP)
      IF(IN.EQ.0) IN=IOLD
      WRITE(6,9520) ERREND(JFLG),IN,KRE
 9520 FORMAT('0**',A8,'ON INPUT TAPE',I3,'  RECORD',I2,', STOP')
      STOP
      END
